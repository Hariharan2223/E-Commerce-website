
# version: '3.12'

# services:
#   web:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     command: gunicorn shop_project.wsgi:application --bind 0.0.0.0:8000 --timeout 120
#     env_file:
#       - ./.env 
#     ports:
#       - "8000:8000"
#     depends_on:
#       - db
#       - redis  
#     volumes:
#       - ./static:/app/staticfiles
#     networks:
#       - my_network

#   db:
#     image: mysql:8.0
#     container_name: mysql_container
#     restart: unless-stopped
#     env_file:
#       - ./.env
#     environment:
#       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#       MYSQL_DATABASE: ${DB_NAME}
#       MYSQL_USER: ${DB_USER}
#       MYSQL_PASSWORD: ${DB_PASSWORD}
#     ports:
#       - "3306:3306"
#     volumes:
#       - mysql_data:/var/lib/mysql
#     networks:
#       - my_network


#   redis:
#     image: redis:latest
#     container_name: redis_instance
#     restart: unless-stopped
#     ports:
#       - "6379:6379"
#     # volumns:
#     #   - redis_data:/data
#     networks:
#       - my_network

# volumes:
#   mysql_data:

# networks:
#   my_network:





version: '3.12'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: gunicorn shop_project.wsgi:application --bind 0.0.0.0:8000 --timeout 120
    env_file:
      - ./.env 
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./static:/app/staticfiles

  db:
    image: mysql:8.0
    container_name: mysql_container
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  redis:
    image: redis:latest
    container_name: redis_instance
    restart: unless-stopped
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"     
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery_worker:
    build:
      context: .
    command: celery -A shop_project worker -l info --pool=solo
    depends_on:
      rabbitmq:
        condition: service_healthy

volumes:
  mysql_data:


 # redis:
  #   image: redis:latest
  #   container_name: redis_instance
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 5s
  #     timeout: 2s
  #     retries: 5
